import api_pb2
from .data.types import NamedTensorsMap
from .executor.graph_executor import GraphExecutor

class Converter:
    def __init__(self):
        pass

    def convert(self, model_json: str, weight_data: bytes):
        graph_def = self.parse_graph_def(model_json)
        weight_map = self.parse_weight_map(weight_data)
        return GraphExecutor(graph_def, weight_map)

    def parse_graph_def(self, model_json: str) -> api_pb2.GraphDef:
        graph_def = api_pb2.GraphDef()
        # Implement parsing logic for model JSON to GraphDef
        return graph_def

    def parse_weight_map(self, weight_data: bytes) -> NamedTensorsMap:
        # Implement parsing logic for weight data
        pass
from ..data.types import NamedTensorsMap
import api_pb2


class OperationMapper:
    def __init__(self):
        self.op_mappers = {}  # Define your op mappers here

    def transform_graph(self, graph: api_pb2.GraphDef, weight_map: NamedTensorsMap):
        transformed_graph = api_pb2.GraphDef()
        for node in graph.node:
            transformed_node = self.transform_node(node, weight_map)
            transformed_graph.node.append(transformed_node)
        return transformed_graph

    def transform_node(self, node: api_pb2.NodeDef, weight_map: NamedTensorsMap) -> api_pb2.NodeDef:
        # Implement node transformation logic
        pass
import api_pb2
from typing import Dict, List, Union


# You can define convenience functions or wrappers here if needed
def create_node_def(name: str, op: str) -> api_pb2.NodeDef:
    node = api_pb2.NodeDef()
    node.name = name
    node.op = op
    return node

def create_attr_value(value: Union[float, int, str, bool]) -> api_pb2.AttrValue:
    attr = api_pb2.AttrValue()
    if isinstance(value, float):
        attr.f = value
    elif isinstance(value, int):
        attr.i = value
    elif isinstance(value, str):
        attr.s = value.encode()
    elif isinstance(value, bool):
        attr.b = value
    return attr

# Add more helper functions as needed
from typing import Dict, List, Union
import tensorflow as tf
import api_pb2

NamedTensorMap = Dict[str, tf.Tensor]
NamedTensorsMap = Dict[str, List[tf.Tensor]]
TensorArrayMap = Dict[int, 'TensorArray']
TensorListMap = Dict[int, 'TensorList']
HashTableMap = Dict[int, 'HashTable']

class TensorInfo:
    def __init__(self, proto: api_pb2.TensorInfo):
        self.proto = proto

    @property
    def name(self) -> str:
        return self.proto.name

    @property
    def dtype(self) -> tf.DType:
        return tf.dtypes.as_dtype(self.proto.dtype)

    @property
    def shape(self) -> tf.TensorShape:
        return tf.TensorShape([dim.size for dim in self.proto.tensor_shape.dim])
import tensorflow as tf
import api_pb2

class TensorArray:
    def __init__(self, dtype: tf.DType, size: int, dynamic_size: bool = False):
        self.handle = tf.raw_ops.TensorArrayV3(
            dtype=dtype, size=size, dynamic_size=dynamic_size
        )

    def write(self, index: int, value: tf.Tensor):
        tf.raw_ops.TensorArrayWriteV3(
            handle=self.handle, index=index, value=value, flow_in=self.handle.flow
        )

    def read(self, index: int) -> tf.Tensor:
        return tf.raw_ops.TensorArrayReadV3(
            handle=self.handle, index=index, flow_in=self.handle.flow
        )
import api_pb2
from ..data.types import NamedTensorsMap, TensorArrayMap, TensorListMap
from ..operations.operation_mapper import OperationMapper

class GraphExecutor:
    def __init__(self, graph_def: api_pb2.GraphDef, weight_map: NamedTensorsMap):
        self.graph = OperationMapper().transform_graph(graph_def, weight_map)
        self.weight_map = weight_map
        self.tensor_array_map = TensorArrayMap()
        self.tensor_list_map = TensorListMap()

    def execute(self, inputs: NamedTensorsMap):
        # Implement graph execution logic
        pass
import tensorflow as tf
import api_pb2

class TensorList:
    def __init__(self, element_shape: tf.TensorShape, element_dtype: tf.DType):
        self.handle = tf.raw_ops.EmptyTensorList(
            element_shape=element_shape, element_dtype=element_dtype
        )

    def push_back(self, tensor: tf.Tensor):
        self.handle = tf.raw_ops.TensorListPushBack(
            input_handle=self.handle, tensor=tensor
        )

    def get_item(self, index: int) -> tf.Tensor:
        return tf.raw_ops.TensorListGetItem(
            input_handle=self.handle, index=index, element_shape=self.handle.element_shape
        )
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\tapi.proto\x12\ntensorflow\"&\n\x03\x41ny\x12\x10\n\x08type_url\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x0c\"p\n\x0bTensorShape\x12(\n\x03\x64im\x18\x02 \x03(\x0b\x32\x1b.tensorflow.TensorShape.Dim\x12\x14\n\x0cunknown_rank\x18\x03 \x01(\x08\x1a!\n\x03\x44im\x12\x0c\n\x04size\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\"\xdb\x02\n\x06Tensor\x12#\n\x05\x64type\x18\x01 \x01(\x0e\x32\x14.tensorflow.DataType\x12-\n\x0ctensor_shape\x18\x02 \x01(\x0b\x32\x17.tensorflow.TensorShape\x12\x16\n\x0eversion_number\x18\x03 \x01(\x05\x12\x16\n\x0etensor_content\x18\x04 \x01(\x0c\x12\x15\n\tfloat_val\x18\x05 \x03(\x02\x42\x02\x10\x01\x12\x16\n\ndouble_val\x18\x06 \x03(\x01\x42\x02\x10\x01\x12\x13\n\x07int_val\x18\x07 \x03(\x05\x42\x02\x10\x01\x12\x12\n\nstring_val\x18\x08 \x03(\x0c\x12\x18\n\x0cscomplex_val\x18\t \x03(\x02\x42\x02\x10\x01\x12\x15\n\tint64_val\x18\n \x03(\x03\x42\x02\x10\x01\x12\x14\n\x08\x62ool_val\x18\x0b \x03(\x08\x42\x02\x10\x01\x12\x16\n\nuint32_val\x18\x10 \x03(\rB\x02\x10\x01\x12\x16\n\nuint64_val\x18\x11 \x03(\x04\x42\x02\x10\x01\"\x92\x04\n\tAttrValue\x12/\n\x04list\x18\x01 \x01(\x0b\x32\x1f.tensorflow.AttrValue.ListValueH\x00\x12\x0b\n\x01s\x18\x02 \x01(\x0cH\x00\x12\x0b\n\x01i\x18\x03 \x01(\x03H\x00\x12\x0b\n\x01\x66\x18\x04 \x01(\x02H\x00\x12\x0b\n\x01\x62\x18\x05 \x01(\x08H\x00\x12$\n\x04type\x18\x06 \x01(\x0e\x32\x14.tensorflow.DataTypeH\x00\x12(\n\x05shape\x18\x07 \x01(\x0b\x32\x17.tensorflow.TensorShapeH\x00\x12$\n\x06tensor\x18\x08 \x01(\x0b\x32\x12.tensorflow.TensorH\x00\x12\x15\n\x0bplaceholder\x18\t \x01(\tH\x00\x12(\n\x04\x66unc\x18\n \x01(\x0b\x32\x18.tensorflow.NameAttrListH\x00\x1a\xdf\x01\n\tListValue\x12\t\n\x01s\x18\x02 \x03(\x0c\x12\r\n\x01i\x18\x03 \x03(\x03\x42\x02\x10\x01\x12\r\n\x01\x66\x18\x04 \x03(\x02\x42\x02\x10\x01\x12\r\n\x01\x62\x18\x05 \x03(\x08\x42\x02\x10\x01\x12&\n\x04type\x18\x06 \x03(\x0e\x32\x14.tensorflow.DataTypeB\x02\x10\x01\x12&\n\x05shape\x18\x07 \x03(\x0b\x32\x17.tensorflow.TensorShape\x12\"\n\x06tensor\x18\x08 \x03(\x0b\x32\x12.tensorflow.Tensor\x12&\n\x04\x66unc\x18\t \x03(\x0b\x32\x18.tensorflow.NameAttrListB\x07\n\x05value\"\x92\x01\n\x0cNameAttrList\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x30\n\x04\x61ttr\x18\x02 \x03(\x0b\x32\".tensorflow.NameAttrList.AttrEntry\x1a\x42\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.tensorflow.AttrValue:\x02\x38\x01\"\xb3\x01\n\x07NodeDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02op\x18\x02 \x01(\t\x12\r\n\x05input\x18\x03 \x03(\t\x12\x0e\n\x06\x64\x65vice\x18\x04 \x01(\t\x12+\n\x04\x61ttr\x18\x05 \x03(\x0b\x32\x1d.tensorflow.NodeDef.AttrEntry\x1a\x42\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.tensorflow.AttrValue:\x02\x38\x01\"K\n\nVersionDef\x12\x10\n\x08producer\x18\x01 \x01(\x05\x12\x14\n\x0cmin_consumer\x18\x02 \x01(\x05\x12\x15\n\rbad_consumers\x18\x03 \x03(\x05\"\x88\x01\n\x08GraphDef\x12!\n\x04node\x18\x01 \x03(\x0b\x32\x13.tensorflow.NodeDef\x12(\n\x08versions\x18\x04 \x01(\x0b\x32\x16.tensorflow.VersionDef\x12/\n\x07library\x18\x02 \x01(\x0b\x32\x1e.tensorflow.FunctionDefLibrary\"\xda\x03\n\rCollectionDef\x12\x37\n\tnode_list\x18\x01 \x01(\x0b\x32\".tensorflow.CollectionDef.NodeListH\x00\x12\x39\n\nbytes_list\x18\x02 \x01(\x0b\x32#.tensorflow.CollectionDef.BytesListH\x00\x12\x39\n\nint64_list\x18\x03 \x01(\x0b\x32#.tensorflow.CollectionDef.Int64ListH\x00\x12\x39\n\nfloat_list\x18\x04 \x01(\x0b\x32#.tensorflow.CollectionDef.FloatListH\x00\x12\x35\n\x08\x61ny_list\x18\x05 \x01(\x0b\x32!.tensorflow.CollectionDef.AnyListH\x00\x1a\x19\n\x08NodeList\x12\r\n\x05value\x18\x01 \x03(\t\x1a\x1a\n\tBytesList\x12\r\n\x05value\x18\x01 \x03(\x0c\x1a\x1e\n\tInt64List\x12\x11\n\x05value\x18\x01 \x03(\x03\x42\x02\x10\x01\x1a\x1e\n\tFloatList\x12\x11\n\x05value\x18\x01 \x03(\x02\x42\x02\x10\x01\x1a)\n\x07\x41nyList\x12\x1e\n\x05value\x18\x01 \x03(\x0b\x32\x0f.tensorflow.AnyB\x06\n\x04kind\"\x9e\x02\n\x08SaverDef\x12\x1c\n\x14\x66ilename_tensor_name\x18\x01 \x01(\t\x12\x18\n\x10save_tensor_name\x18\x02 \x01(\t\x12\x17\n\x0frestore_op_name\x18\x03 \x01(\t\x12\x13\n\x0bmax_to_keep\x18\x04 \x01(\x05\x12\x0f\n\x07sharded\x18\x05 \x01(\x08\x12%\n\x1dkeep_checkpoint_every_n_hours\x18\x06 \x01(\x02\x12=\n\x07version\x18\x07 \x01(\x0e\x32,.tensorflow.SaverDef.CheckpointFormatVersion\"5\n\x17\x43heckpointFormatVersion\x12\n\n\x06LEGACY\x10\x00\x12\x06\n\x02V1\x10\x01\x12\x06\n\x02V2\x10\x02\"\x9b\x02\n\nTensorInfo\x12\x0e\n\x04name\x18\x01 \x01(\tH\x00\x12\x36\n\ncoo_sparse\x18\x04 \x01(\x0b\x32 .tensorflow.TensorInfo.CooSparseH\x00\x12#\n\x05\x64type\x18\x02 \x01(\x0e\x32\x14.tensorflow.DataType\x12-\n\x0ctensor_shape\x18\x03 \x01(\x0b\x32\x17.tensorflow.TensorShape\x1a\x65\n\tCooSparse\x12\x1a\n\x12values_tensor_name\x18\x01 \x01(\t\x12\x1b\n\x13indices_tensor_name\x18\x02 \x01(\t\x12\x1f\n\x17\x64\x65nse_shape_tensor_name\x18\x03 \x01(\tB\n\n\x08\x65ncoding\"\xa0\x02\n\x0cSignatureDef\x12\x34\n\x06inputs\x18\x01 \x03(\x0b\x32$.tensorflow.SignatureDef.InputsEntry\x12\x36\n\x07outputs\x18\x02 \x03(\x0b\x32%.tensorflow.SignatureDef.OutputsEntry\x12\x13\n\x0bmethod_name\x18\x03 \x01(\t\x1a\x45\n\x0bInputsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b\x32\x16.tensorflow.TensorInfo:\x02\x38\x01\x1a\x46\n\x0cOutputsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12%\n\x05value\x18\x02 \x01(\x0b\x32\x16.tensorflow.TensorInfo:\x02\x38\x01\"M\n\x0c\x41ssetFileDef\x12+\n\x0btensor_info\x18\x01 \x01(\x0b\x32\x16.tensorflow.TensorInfo\x12\x10\n\x08\x66ilename\x18\x02 \x01(\t\"\xf5\x05\n\x05OpDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12+\n\tinput_arg\x18\x02 \x03(\x0b\x32\x18.tensorflow.OpDef.ArgDef\x12,\n\noutput_arg\x18\x03 \x03(\x0b\x32\x18.tensorflow.OpDef.ArgDef\x12\'\n\x04\x61ttr\x18\x04 \x03(\x0b\x32\x19.tensorflow.OpDef.AttrDef\x12\x34\n\x0b\x64\x65precation\x18\x08 \x01(\x0b\x32\x1f.tensorflow.OpDef.OpDeprecation\x12\x0f\n\x07summary\x18\x05 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x06 \x01(\t\x12\x16\n\x0eis_commutative\x18\x12 \x01(\x08\x12\x14\n\x0cis_aggregate\x18\x10 \x01(\x08\x12\x13\n\x0bis_stateful\x18\x11 \x01(\x08\x12\"\n\x1a\x61llows_uninitialized_input\x18\x13 \x01(\x08\x1a\x9f\x01\n\x06\x41rgDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\"\n\x04type\x18\x03 \x01(\x0e\x32\x14.tensorflow.DataType\x12\x11\n\ttype_attr\x18\x04 \x01(\t\x12\x13\n\x0bnumber_attr\x18\x05 \x01(\t\x12\x16\n\x0etype_list_attr\x18\x06 \x01(\t\x12\x0e\n\x06is_ref\x18\x10 \x01(\x08\x1a\xbd\x01\n\x07\x41ttrDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12,\n\rdefault_value\x18\x03 \x01(\x0b\x32\x15.tensorflow.AttrValue\x12\x13\n\x0b\x64\x65scription\x18\x04 \x01(\t\x12\x13\n\x0bhas_minimum\x18\x05 \x01(\x08\x12\x0f\n\x07minimum\x18\x06 \x01(\x03\x12-\n\x0e\x61llowed_values\x18\x07 \x01(\x0b\x32\x15.tensorflow.AttrValue\x1a\x35\n\rOpDeprecation\x12\x0f\n\x07version\x18\x01 \x01(\x05\x12\x13\n\x0b\x65xplanation\x18\x02 \x01(\t\"\'\n\x06OpList\x12\x1d\n\x02op\x18\x01 \x03(\x0b\x32\x11.tensorflow.OpDef\"\xbe\x05\n\x0cMetaGraphDef\x12;\n\rmeta_info_def\x18\x01 \x01(\x0b\x32$.tensorflow.MetaGraphDef.MetaInfoDef\x12\'\n\tgraph_def\x18\x02 \x01(\x0b\x32\x14.tensorflow.GraphDef\x12\'\n\tsaver_def\x18\x03 \x01(\x0b\x32\x14.tensorflow.SaverDef\x12\x43\n\x0e\x63ollection_def\x18\x04 \x03(\x0b\x32+.tensorflow.MetaGraphDef.CollectionDefEntry\x12\x41\n\rsignature_def\x18\x05 \x03(\x0b\x32*.tensorflow.MetaGraphDef.SignatureDefEntry\x12\x30\n\x0e\x61sset_file_def\x18\x06 \x03(\x0b\x32\x18.tensorflow.AssetFileDef\x1a\xc4\x01\n\x0bMetaInfoDef\x12\x1a\n\x12meta_graph_version\x18\x01 \x01(\t\x12,\n\x10stripped_op_list\x18\x02 \x01(\x0b\x32\x12.tensorflow.OpList\x12!\n\x08\x61ny_info\x18\x03 \x01(\x0b\x32\x0f.tensorflow.Any\x12\x0c\n\x04tags\x18\x04 \x03(\t\x12\x1a\n\x12tensorflow_version\x18\x05 \x01(\t\x12\x1e\n\x16tensorflow_git_version\x18\x06 \x01(\t\x1aO\n\x12\x43ollectionDefEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12(\n\x05value\x18\x02 \x01(\x0b\x32\x19.tensorflow.CollectionDef:\x02\x38\x01\x1aM\n\x11SignatureDefEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\'\n\x05value\x18\x02 \x01(\x0b\x32\x18.tensorflow.SignatureDef:\x02\x38\x01\"_\n\nSavedModel\x12\"\n\x1asaved_model_schema_version\x18\x01 \x01(\x03\x12-\n\x0bmeta_graphs\x18\x02 \x03(\x0b\x32\x18.tensorflow.MetaGraphDef\"j\n\x12\x46unctionDefLibrary\x12)\n\x08\x66unction\x18\x01 \x03(\x0b\x32\x17.tensorflow.FunctionDef\x12)\n\x08gradient\x18\x02 \x03(\x0b\x32\x17.tensorflow.GradientDef\"\xb0\x02\n\x0b\x46unctionDef\x12$\n\tsignature\x18\x01 \x01(\x0b\x32\x11.tensorflow.OpDef\x12/\n\x04\x61ttr\x18\x05 \x03(\x0b\x32!.tensorflow.FunctionDef.AttrEntry\x12%\n\x08node_def\x18\x03 \x03(\x0b\x32\x13.tensorflow.NodeDef\x12-\n\x03ret\x18\x04 \x03(\x0b\x32 .tensorflow.FunctionDef.RetEntry\x1a\x42\n\tAttrEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.tensorflow.AttrValue:\x02\x38\x01\x1a*\n\x08RetEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01J\x04\x08\x02\x10\x03\";\n\x0bGradientDef\x12\x15\n\rfunction_name\x18\x01 \x01(\t\x12\x15\n\rgradient_func\x18\x02 \x01(\t*\xec\x03\n\x08\x44\x61taType\x12\x0e\n\nDT_INVALID\x10\x00\x12\x0c\n\x08\x44T_FLOAT\x10\x01\x12\r\n\tDT_DOUBLE\x10\x02\x12\x0c\n\x08\x44T_INT32\x10\x03\x12\x0c\n\x08\x44T_UINT8\x10\x04\x12\x0c\n\x08\x44T_INT16\x10\x05\x12\x0b\n\x07\x44T_INT8\x10\x06\x12\r\n\tDT_STRING\x10\x07\x12\x10\n\x0c\x44T_COMPLEX64\x10\x08\x12\x0c\n\x08\x44T_INT64\x10\t\x12\x0b\n\x07\x44T_BOOL\x10\n\x12\x0c\n\x08\x44T_QINT8\x10\x0b\x12\r\n\tDT_QUINT8\x10\x0c\x12\r\n\tDT_QINT32\x10\r\x12\x0f\n\x0b\x44T_BFLOAT16\x10\x0e\x12\x10\n\x0c\x44T_FLOAT_REF\x10\x65\x12\x11\n\rDT_DOUBLE_REF\x10\x66\x12\x10\n\x0c\x44T_INT32_REF\x10g\x12\x10\n\x0c\x44T_UINT8_REF\x10h\x12\x10\n\x0c\x44T_INT16_REF\x10i\x12\x0f\n\x0b\x44T_INT8_REF\x10j\x12\x11\n\rDT_STRING_REF\x10k\x12\x14\n\x10\x44T_COMPLEX64_REF\x10l\x12\x10\n\x0c\x44T_INT64_REF\x10m\x12\x0f\n\x0b\x44T_BOOL_REF\x10n\x12\x10\n\x0c\x44T_QINT8_REF\x10o\x12\x11\n\rDT_QUINT8_REF\x10p\x12\x11\n\rDT_QINT32_REF\x10q\x12\x13\n\x0f\x44T_BFLOAT16_REF\x10rb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'api_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TENSOR.fields_by_name['float_val']._options = None
  _TENSOR.fields_by_name['float_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['double_val']._options = None
  _TENSOR.fields_by_name['double_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['int_val']._options = None
  _TENSOR.fields_by_name['int_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['scomplex_val']._options = None
  _TENSOR.fields_by_name['scomplex_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['int64_val']._options = None
  _TENSOR.fields_by_name['int64_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['bool_val']._options = None
  _TENSOR.fields_by_name['bool_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['uint32_val']._options = None
  _TENSOR.fields_by_name['uint32_val']._serialized_options = b'\020\001'
  _TENSOR.fields_by_name['uint64_val']._options = None
  _TENSOR.fields_by_name['uint64_val']._serialized_options = b'\020\001'
  _ATTRVALUE_LISTVALUE.fields_by_name['i']._options = None
  _ATTRVALUE_LISTVALUE.fields_by_name['i']._serialized_options = b'\020\001'
  _ATTRVALUE_LISTVALUE.fields_by_name['f']._options = None
  _ATTRVALUE_LISTVALUE.fields_by_name['f']._serialized_options = b'\020\001'
  _ATTRVALUE_LISTVALUE.fields_by_name['b']._options = None
  _ATTRVALUE_LISTVALUE.fields_by_name['b']._serialized_options = b'\020\001'
  _ATTRVALUE_LISTVALUE.fields_by_name['type']._options = None
  _ATTRVALUE_LISTVALUE.fields_by_name['type']._serialized_options = b'\020\001'
  _NAMEATTRLIST_ATTRENTRY._options = None
  _NAMEATTRLIST_ATTRENTRY._serialized_options = b'8\001'
  _NODEDEF_ATTRENTRY._options = None
  _NODEDEF_ATTRENTRY._serialized_options = b'8\001'
  _COLLECTIONDEF_INT64LIST.fields_by_name['value']._options = None
  _COLLECTIONDEF_INT64LIST.fields_by_name['value']._serialized_options = b'\020\001'
  _COLLECTIONDEF_FLOATLIST.fields_by_name['value']._options = None
  _COLLECTIONDEF_FLOATLIST.fields_by_name['value']._serialized_options = b'\020\001'
  _SIGNATUREDEF_INPUTSENTRY._options = None
  _SIGNATUREDEF_INPUTSENTRY._serialized_options = b'8\001'
  _SIGNATUREDEF_OUTPUTSENTRY._options = None
  _SIGNATUREDEF_OUTPUTSENTRY._serialized_options = b'8\001'
  _METAGRAPHDEF_COLLECTIONDEFENTRY._options = None
  _METAGRAPHDEF_COLLECTIONDEFENTRY._serialized_options = b'8\001'
  _METAGRAPHDEF_SIGNATUREDEFENTRY._options = None
  _METAGRAPHDEF_SIGNATUREDEFENTRY._serialized_options = b'8\001'
  _FUNCTIONDEF_ATTRENTRY._options = None
  _FUNCTIONDEF_ATTRENTRY._serialized_options = b'8\001'
  _FUNCTIONDEF_RETENTRY._options = None
  _FUNCTIONDEF_RETENTRY._serialized_options = b'8\001'
  _globals['_DATATYPE']._serialized_start=5111
  _globals['_DATATYPE']._serialized_end=5603
  _globals['_ANY']._serialized_start=25
  _globals['_ANY']._serialized_end=63
  _globals['_TENSORSHAPE']._serialized_start=65
  _globals['_TENSORSHAPE']._serialized_end=177
  _globals['_TENSORSHAPE_DIM']._serialized_start=144
  _globals['_TENSORSHAPE_DIM']._serialized_end=177
  _globals['_TENSOR']._serialized_start=180
  _globals['_TENSOR']._serialized_end=527
  _globals['_ATTRVALUE']._serialized_start=530
  _globals['_ATTRVALUE']._serialized_end=1060
  _globals['_ATTRVALUE_LISTVALUE']._serialized_start=828
  _globals['_ATTRVALUE_LISTVALUE']._serialized_end=1051
  _globals['_NAMEATTRLIST']._serialized_start=1063
  _globals['_NAMEATTRLIST']._serialized_end=1209
  _globals['_NAMEATTRLIST_ATTRENTRY']._serialized_start=1143
  _globals['_NAMEATTRLIST_ATTRENTRY']._serialized_end=1209
  _globals['_NODEDEF']._serialized_start=1212
  _globals['_NODEDEF']._serialized_end=1391
  _globals['_NODEDEF_ATTRENTRY']._serialized_start=1143
  _globals['_NODEDEF_ATTRENTRY']._serialized_end=1209
  _globals['_VERSIONDEF']._serialized_start=1393
  _globals['_VERSIONDEF']._serialized_end=1468
  _globals['_GRAPHDEF']._serialized_start=1471
  _globals['_GRAPHDEF']._serialized_end=1607
  _globals['_COLLECTIONDEF']._serialized_start=1610
  _globals['_COLLECTIONDEF']._serialized_end=2084
  _globals['_COLLECTIONDEF_NODELIST']._serialized_start=1916
  _globals['_COLLECTIONDEF_NODELIST']._serialized_end=1941
  _globals['_COLLECTIONDEF_BYTESLIST']._serialized_start=1943
  _globals['_COLLECTIONDEF_BYTESLIST']._serialized_end=1969
  _globals['_COLLECTIONDEF_INT64LIST']._serialized_start=1971
  _globals['_COLLECTIONDEF_INT64LIST']._serialized_end=2001
  _globals['_COLLECTIONDEF_FLOATLIST']._serialized_start=2003
  _globals['_COLLECTIONDEF_FLOATLIST']._serialized_end=2033
  _globals['_COLLECTIONDEF_ANYLIST']._serialized_start=2035
  _globals['_COLLECTIONDEF_ANYLIST']._serialized_end=2076
  _globals['_SAVERDEF']._serialized_start=2087
  _globals['_SAVERDEF']._serialized_end=2373
  _globals['_SAVERDEF_CHECKPOINTFORMATVERSION']._serialized_start=2320
  _globals['_SAVERDEF_CHECKPOINTFORMATVERSION']._serialized_end=2373
  _globals['_TENSORINFO']._serialized_start=2376
  _globals['_TENSORINFO']._serialized_end=2659
  _globals['_TENSORINFO_COOSPARSE']._serialized_start=2546
  _globals['_TENSORINFO_COOSPARSE']._serialized_end=2647
  _globals['_SIGNATUREDEF']._serialized_start=2662
  _globals['_SIGNATUREDEF']._serialized_end=2950
  _globals['_SIGNATUREDEF_INPUTSENTRY']._serialized_start=2809
  _globals['_SIGNATUREDEF_INPUTSENTRY']._serialized_end=2878
  _globals['_SIGNATUREDEF_OUTPUTSENTRY']._serialized_start=2880
  _globals['_SIGNATUREDEF_OUTPUTSENTRY']._serialized_end=2950
  _globals['_ASSETFILEDEF']._serialized_start=2952
  _globals['_ASSETFILEDEF']._serialized_end=3029
  _globals['_OPDEF']._serialized_start=3032
  _globals['_OPDEF']._serialized_end=3789
  _globals['_OPDEF_ARGDEF']._serialized_start=3383
  _globals['_OPDEF_ARGDEF']._serialized_end=3542
  _globals['_OPDEF_ATTRDEF']._serialized_start=3545
  _globals['_OPDEF_ATTRDEF']._serialized_end=3734
  _globals['_OPDEF_OPDEPRECATION']._serialized_start=3736
  _globals['_OPDEF_OPDEPRECATION']._serialized_end=3789
  _globals['_OPLIST']._serialized_start=3791
  _globals['_OPLIST']._serialized_end=3830
  _globals['_METAGRAPHDEF']._serialized_start=3833
  _globals['_METAGRAPHDEF']._serialized_end=4535
  _globals['_METAGRAPHDEF_METAINFODEF']._serialized_start=4179
  _globals['_METAGRAPHDEF_METAINFODEF']._serialized_end=4375
  _globals['_METAGRAPHDEF_COLLECTIONDEFENTRY']._serialized_start=4377
  _globals['_METAGRAPHDEF_COLLECTIONDEFENTRY']._serialized_end=4456
  _globals['_METAGRAPHDEF_SIGNATUREDEFENTRY']._serialized_start=4458
  _globals['_METAGRAPHDEF_SIGNATUREDEFENTRY']._serialized_end=4535
  _globals['_SAVEDMODEL']._serialized_start=4537
  _globals['_SAVEDMODEL']._serialized_end=4632
  _globals['_FUNCTIONDEFLIBRARY']._serialized_start=4634
  _globals['_FUNCTIONDEFLIBRARY']._serialized_end=4740
  _globals['_FUNCTIONDEF']._serialized_start=4743
  _globals['_FUNCTIONDEF']._serialized_end=5047
  _globals['_FUNCTIONDEF_ATTRENTRY']._serialized_start=1143
  _globals['_FUNCTIONDEF_ATTRENTRY']._serialized_end=1209
  _globals['_FUNCTIONDEF_RETENTRY']._serialized_start=4999
  _globals['_FUNCTIONDEF_RETENTRY']._serialized_end=5041
  _globals['_GRADIENTDEF']._serialized_start=5049
  _globals['_GRADIENTDEF']._serialized_end=5108
# @@protoc_insertion_point(module_scope)

